--- REACT HOOKS ---

1. USE STATE
- Use states returns an array of 2 elements, the first element is the current State snapshot and thes econd is the state updating function.
- React saves the current state of and does not affects by the re-rendering of the component.
- The state state updating function contains the logic on which the state is updated and then the state is saved by React. 
- So we store the useState() with 2 constants, first one is ofcourse the current state snapshot and the second is the State Updating Function.
- We pass the first constant in the place where we want to use the state snapshot and this is known as 2 Way Binding. That we did with giving the built in value prop(in out case)
- For updating the state we call the function where we want to changes the state, most commonly in events, in our case we did it by passing the State Updating Function in the built onChange prop. 
part 2:
- When we start typing in the title input field we get an error that the typpe number is unctrolled, because the way we called the SUF(State Updating Function) is not correct, it replaces the old state obj with the new state obj whic only contains the title key but not the amount key.
- It is out responsibilty to make sure that we don't lose any data with state updating so we will restroe the old value in the updated state.
- To guarantee that we always have the latest state in the SUF, we can pass an anonymous function to SUF with the previosState as the parameter. //-- I have calles the SUF in title and amount input fields to differentiate--//. 
- MULTIPLE STATES: Rather then making our a state an object and aking care that it never changes with the new State Update even if we only want to change one kye/one state, we can have multiple states using useState() seperately for each state.

2. RULES OF HOOKS
- We can use hooks only in functional components or custom hooks.
- We cannot define our state at any other level, only define the state on the root level.

3. LIFTING THE STATE UP:
- So, we have defined the state in a component and we have to make it usable in other components as well to make it work. 
- This is done by passing pointers as props to the component (where the component is used/rendered in its parent component)

4. SENDING HTTP REQUESTS:
- Http requests can be send by built in fetch function.
- The first parameter takes the url of the API
- The second parameter is for the configuration if we're using a backend.
- The fectch return a promise.
- this promise is passed into a then block  where it is converted to JS object and returned //--return response.json()
- The returned data is then passed in another then block so that it can be used.

2. USE EFFECT

